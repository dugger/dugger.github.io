<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-05T09:44:54-04:00</updated><id>http://localhost:4000/</id><title type="html">alex_dugger $&amp;gt;</title><subtitle>Software Engineer with passion for designing and building practicle solutions to complex problems.
</subtitle><entry><title type="html">Blattfruit Pie</title><link href="http://localhost:4000/blattfruit_pie/" rel="alternate" type="text/html" title="Blattfruit Pie" /><published>2017-08-25T00:00:00-04:00</published><updated>2017-08-25T00:00:00-04:00</updated><id>http://localhost:4000/blattfruit_pie</id><content type="html" xml:base="http://localhost:4000/blattfruit_pie/">&lt;p&gt;Several years ago my stupid brother (the target) liked to prank my family by changing the backgrounds of laptops, phones, and tablets to his stupid face. It was funny, but got annoying, and he took it too far.  He changed my mother’s background to the &lt;a href=&quot;http://knowyourmeme.com/memes/jeff-goldblum-is-watching-you-poop&quot;&gt;“Jeff Goldblum is Watching You Poop”&lt;/a&gt; meme.  She wasn’t pleased. I devised this project as retaliation on her behalf.&lt;/p&gt;

&lt;h3 id=&quot;github-duggerblattfruit_pie&quot;&gt;Github: &lt;a href=&quot;https://github.com/dugger/blattfruit_pie&quot;&gt;dugger/blattfruit_pie&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;My brother introduced me to video games.  Playing Sierra’s Quest games on his Commodore Amiga is one of the fondest memories I have of my childhood.  There is a piece of dialog in Space Quest III I’ve always found funny. When you order your food at Monolith Burger, The Pushy Counter Clerk asks “Would you like a Blattfruit Pie with that?”, your options are Yes and Yes. I picked this idea as the center of my trolling for nostalgia and because I knew it would be instantly recognizable to my target.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/blattfruit-applescript.png&quot; alt=&quot;Would you like a Blattfruit Pie with that?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The original version was a simple dialog box built using AppleScript.  It lacked the styling of the dialog box from the game, but it got the point across.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-applescript&quot; data-lang=&quot;applescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;tell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Finder&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display dialog&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Would you like a blattfruit pie with that?&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pushy Counter Clerk&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tell&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The dialog was triggered using a cron task that I installed on the target’s machine; a little bash script would curl a text file I stored in a public Dropbox folder, read the unix timestamp from the file, and trigger the dialog if the timestamp had passed.  I had to install it manually on his machine, and I had to have his password in order to allow the dialog app to be run (since the app isn’t signed).  Despite all this, I installed it successfully, and for the next nine months my family reveled in his confused excitement at discovering some secret easter egg in OS X.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/blattfruit.png&quot; alt=&quot;Would you like a Blattfruit Pie with that?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the end he got a new computer and I never got to reinstall it there, so it died.  I confessed to it not long after, and we had a good laugh, but I’ve never been able to put this project to bed.  I’ve always wanted to learn more C / Objective C / Xcode, and this provided a fine base for doing that.  So far I’ve rebuilt the dialog in Xcode and styled it to look just like the game, and I’ve got a list of new features I want to add.  Someday I’ll install the new and improved version on his computer…&lt;/p&gt;</content><author><name>Me!</name></author><summary type="html">A little 'trojan' I wrote to troll my brother.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blattfruit-pcc.png" /></entry><entry><title type="html">Snacky French</title><link href="http://localhost:4000/snacky_french/" rel="alternate" type="text/html" title="Snacky French" /><published>2017-07-01T00:00:00-04:00</published><updated>2017-07-01T00:00:00-04:00</updated><id>http://localhost:4000/snacky_french</id><content type="html" xml:base="http://localhost:4000/snacky_french/">&lt;p&gt;A good friend of mine needed a web presence to show off her amazing custom cakes and baked treats, so I built her one.&lt;/p&gt;

&lt;p&gt;In 2017, we updated to use a cleaner, responsive site that put the focus on her products.  By switching from a custom built and hosted site to Square Space she is now able to easily make changes and add new content without needing my help.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;{snackyfrench.com}}&quot;&gt;Snacky French&lt;/a&gt;&lt;/p&gt;</content><author><name>Me!</name></author><summary type="html">A Bakers Website!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/snacky_french_ss.png" /></entry><entry><title type="html">Nil as a Hash Key</title><link href="http://localhost:4000/nil-as-a-hash-key/" rel="alternate" type="text/html" title="Nil as a Hash Key" /><published>2015-10-02T11:08:13-04:00</published><updated>2015-10-02T11:08:13-04:00</updated><id>http://localhost:4000/nil-as-a-hash-key</id><content type="html" xml:base="http://localhost:4000/nil-as-a-hash-key/">&lt;p&gt;I was doing a little code review with a teammate and one of his hash definitions caught my eye.  It looked something like this…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hsh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Qux&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This had nothing to do with our conversation, but… ‘nil’? “Can you really use ‘nil’ as a Hash key?” I asked.  Apparently you can. After all (&lt;a href=&quot;https://youtu.be/OMPfEXIlTVE&quot;&gt;as Sandi Metz taught us&lt;/a&gt;) nothing IS something. So, I tried it, and sure enough, it works.  You can use the ‘active nothing’ in this way.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method_that_might_return_a_symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; :foo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;Foo:0x007fc8b203b970&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method_that_might_return_a_symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;Qux:0x007fc8b203b970&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, I’m not sure there is a huge use case for this, but it is cleaner than writing a condition to ensure the Hash has a value before calling it, so it might have some uses.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, this doesn’t let you get around passing a key.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ArgumentError: wrong number of arguments (0 for 1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That is, unless you do this first…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hash&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;SETTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:[]=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;GETTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;[]=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SETTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;GETTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…but you should probably never do that.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is something you can do, but should you...</summary></entry><entry><title type="html">This American Life: Audio Hackathon</title><link href="http://localhost:4000/tal_audio_hackathon/" rel="alternate" type="text/html" title="This American Life: Audio Hackathon" /><published>2015-09-21T00:00:00-04:00</published><updated>2015-09-21T00:00:00-04:00</updated><id>http://localhost:4000/tal_audio_hackathon</id><content type="html" xml:base="http://localhost:4000/tal_audio_hackathon/">&lt;p&gt;In 2015 took part in an audio themed Hackathon put on by This American Life and ThoughtWorks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lamivo.com/thisamericanlife-hackathon&quot;&gt;http://lamivo.com/thisamericanlife-hackathon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My team developed a tool that allows a user to select a short clip from a podcast and create a video incorporating the audio, transcript, and a visualization that can be shared over Twitter.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hackdash.org/projects/560162a028775a823ff16830&quot;&gt;https://hackdash.org/projects/560162a028775a823ff16830&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/allypalanzi/clipper&quot;&gt;http://github.com/allypalanzi/clipper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This project became the inspiration for a fully developed tool from This American Life, Shortcut!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://shortcut.thisamericanlife.org&quot;&gt;https://shortcut.thisamericanlife.org&lt;/a&gt;&lt;/p&gt;</content><author><name>Me!</name></author><summary type="html">Audio Tools built in one weekend.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/tal-ah-project.png" /></entry></feed>